# setup defaults.
# set -o errexit
# Disallows unset variables.
# set -o nounset

# Check or help requests if not running within xcode.
if [ -z "$PRODUCT_NAME" ]; then
	if [[ $# -lt 2 || $1 == "-?" || $1 == "--help" ]]; then
		echo ""
		echo This script will build a static iphone libraries and documentation and place it all within a dmg archive file.
		echo Syntax:
		echo ""
		echo "   ./staticLibBuild [<PROJECT_NAME> <PRODUCT_NAME> [<CURRENT_PROJECT_VERSION>]]"
		echo ""
		echo "If running from within xcode then there is no need to supply any parameters."
		echo "If running from the command line then the project and product name parameter needs to be supplied."
		echo "If not supplied on the command line then the current project version will be set to 0.0.1"
		exit 0
	fi
fi

# Validate required properties.

# Must have a product name or a parameter.
if [ -z "$PROJECT_NAME" ]; then
	if [ -z "$1" ]; then
		echo "Project name parameter not set and not running within xcode."
		echo "Please pass the project name as parameter 1 or run this script within xcode."
		exit 1
	fi
	PROJECT_NAME=$1
fi
if [ -z "$PRODUCT_NAME" ]; then
	if [ -z "$2" ]; then
		echo "Product name parameter not set and not running within xcode."
		echo "Please pass the product name as parameter 2 or run this script within xcode."
		exit 1
	fi
	PRODUCT_NAME=$2
fi
if [[ $# == 3 && -z "$CURRENT_PROJECT_VERSION" ]]; then
	CURRENT_PROJECT_VERSION=$3
fi

# Set defaults for all required variables.

CURRENT_PROJECT_VERSION=${CURRENT_PROJECT_VERSION=0.0.1}
BUILD_DIR=${BUILD_DIR=$PWD/build}
BUILD_TARGET=${BUILD_TARGET=Build Library}
ARTIFACT_DIR=${TARGET_DIR=Releases/v$CURRENT_PROJECT_VERSION}
PROJECT_DIR=${PROJECT_DIR=$PWD}
APPLEDOC_DIR=${APPLEDOC_DIR=$PROJECT_DIR/../External/appledoc}
DOXYGEN_DIR=${DOXYGEN_DIR=$PROJECT_DIR/../tools/Doxygen.app}
 
# Custom variables used within this script.

DEVICE_SDK=${DEVICE_SDK=iphoneos3.2}
DEVICE_ARCHS=${DEVICE_ARCHS=armv6 armv7}
DEVICE_VALID_ARCHS=${DEVICE_VALID_ARCHS=armv6 armv7}

SIMULATOR_SDK=${SIMULATOR_SDK=iphonesimulator3.2}
SIMULATOR_ARCHS=${SIMULATOR_ARCHS=i386}
SIMULATOR_VALID_ARCHS=${SIMULATOR_VALID_ARCHS=i386}

echo Values being used ...
echo "   PRODUCT_NAME            = $PRODUCT_NAME"
echo "   PROJECT_NAME            = $PROJECT_NAME"
echo "   PROJECT_DIR             = $PROJECT_DIR"
echo "   BUILD_DIR               = $BUILD_DIR"
echo "   ARTIFACT_DIR            = $TARGET_DIR"
echo "   APPLEDOC_DIR            = $APPLEDOC_DIR"
echo "   DOXYGEN_DIR             = $DOXYGEN_DIR"
echo "   CURRENT_PROJECT_VERSION = $CURRENT_PROJECT_VERSION"
echo "   BUILD_TARGET            = $BUILD_TARGET" 
echo "   DEVICE_SDK              = $DEVICE_SDK"
echo "   DEVICE_ARCHS            = $DEVICE_ARCHS"
echo "   DEVICE_VALID_ARCHS      = $DEVICE_VALID_ARCHS"
echo "   SIMULATOR_SDK           = $SIMULATOR_SDK"
echo "   SIMULATOR_ARCHS         = $SIMULATOR_ARCHS"
echo "   SIMULATOR_VALID_ARCHS   = $SIMULATOR_VALID_ARCHS" 

# Start of run.
echo "Starting build run ..."

echo "Cleaning build and target directories ..."
rm -fvr $ARTIFACT_DIR
rm -fvr $BUILD_DIR
echo "Directories cleared."

echo "Building simulator libraries ..."
# xcodebuild -target "$BUILD_TARGET" -sdk $SIMULATOR_SDK -configuration Debug VALID_ARCHS="$SIMULATOR_VALID_ARCHS" ARCHS="$SIMULATOR_ARCHS"
xcodebuild -target "$BUILD_TARGET" -sdk $SIMULATOR_SDK -configuration Release VALID_ARCHS="$SIMULATOR_VALID_ARCHS" ARCHS="$SIMULATOR_ARCHS"

echo "Building device libraries ..."
# xcodebuild -target "$BUILD_TARGET" -sdk $DEVICE_SDK -configuration Debug VALID_ARCHS="$DEVICE_VALID_ARCHS" ARCHS="$DEVICE_ARCHS"
xcodebuild -target "$BUILD_TARGET" -sdk $DEVICE_SDK -configuration Release VALID_ARCHS="$DEVICE_VALID_ARCHS" ARCHS="$DEVICE_ARCHS"

echo "Building appledoc documentation ..."

$APPLEDOC_DIR/build/Release/appledoc -p "$PROJECT_NAME" --input src/code --output "$BUILD_DIR/appledoc" -t $APPLEDOC_DIR/Templates -d $DOXYGEN_DIR/Contents/Resources/doxygen -c doxygen-appledoc.config --xhtml-bordered-issues --docset --docplist docset.plist

Echo "building image directories ..."

mkdir -p $TARGET_DIR

echo "Setting up framework directories..."  
FRAMEWORK_DIR=$ARTIFACT_DIR/$PROJECT_NAME.framework  
mkdir -p $FRAMEWORK_DIR  
mkdir -p $FRAMEWORK_DIR/Versions  
mkdir -p $FRAMEWORK_DIR/Versions/$CURRENT_PROJECT_VERSION
mkdir -p $FRAMEWORK_DIR/Versions/$CURRENT_PROJECT_VERSION/Resources
mkdir -p $FRAMEWORK_DIR/Versions/$CURRENT_PROJECT_VERSION/Headers

echo "Creating framework symlinks..."  
ln -s $CURRENT_PROJECT_VERSION $FRAMEWORK_DIR/Versions/Current
ln -s Versions/Current/Headers $FRAMEWORK_DIR/Headers
ln -s Versions/Current/Resources $FRAMEWORK_DIR/Resources
ln -s Versions/Current/$PROJECT_NAME $FRAMEWORK_DIR/$PROJECT_NAME 

echo "Combining libraries..."  
lipo -create "${PROJECT_DIR}/build/Release-iphoneos/lib${PROJECT_NAME}.a" "${PROJECT_DIR}/build/Release-iphonesimulator/lib${PROJECT_NAME}.a" -o "$FRAMEWORK_DIR/Versions/Current/$PROJECT_NAME"

echo "Copying headers ..."
find $BUILD_DIR/Release-iphoneos -name *.h -print -exec cp "{}" $FRAMEWORK_DIR/Headers \;

echo "Creating plist for framework ..."
sed -e 's/${PROJECT_NAME}/'"${PROJECT_NAME}"'/' -e 's/${CURRENT_PROJECT_VERSION}/'"${CURRENT_PROJECT_VERSION}"'/' "${SRCROOT}/framework.plist" > $FRAMEWORK_DIR/Resources/Info.plist  

echo "Copying docset ..."
mv -vf "$BUILD_DIR"/appledoc/docset "$TARGET_DIR"/au.com.dhc.$PROJECT_NAME.docset
cp installDocSet $ARTIFACT_DIR

echo "Copying markdown documentation from root of project ..."
cp -v *.markdown $ARTIFACT_DIR

echo "Copying other files copied by build ..."
find $BUILD_DIR/Release-iphoneos -type f -not -name *.a -depth 1 -print -exec cp -v "{}" $ARTIFACT_DIR \;

echo Building dmg of project ...
FINAL_DMG="Releases/$PRODUCT_NAME-$CURRENT_PROJECT_VERSION.dmg"
rm -f $FINAL_DMG
hdiutil create "$FINAL_DMG" -ov -srcdir $ARTIFACT_DIR -volname "$PRODUCT_NAME v$CURRENT_PROJECT_VERSION" -attach

echo ""
echo Archive $FINAL_DMG created successfully.


exit 0
